#!/bin/bash
# 1.RocketMQ 是什么
RcoketMQ 是一款低延迟、高可靠、可伸缩、易于使用的消息中间件。具有以下特性：
    支持发布/订阅（Pub/Sub）和点对点（P2P）消息模型
    在一个队列中可靠的先进先出（FIFO）和严格的顺序传递
    支持拉（pull）和推（push）两种消息模式
    单一队列百万消息的堆积能力
    支持多种消息协议，如 JMS、MQTT 等
    分布式高可用的部署架构,满足至少一次消息传递语义
    提供 docker 镜像用于隔离测试和云集群部署
    提供配置、指标和监控等功能丰富的 Dashboard

# 2.术语解释
producer
    消息生产者，生产者的作用就是将消息发送到 MQ，生产者本身既可以产生消息，如读取文本信息等。
    也可以对外提供接口，由外部应用来调用接口，再由生产者将收到的消息发送到 MQ。

producer group
    生产者组，简单来说就是多个发送同一类消息的生产者称之为一个生产者组。

consumer
    消息消费者，简单来说，消费 MQ 上的消息的应用程序就是消费者，
    至于消息是否进行逻辑处理，还是直接存储到数据库等取决于业务需要。

consumer group
    消费者组，和生产者类似，消费同一类消息的多个 consumer 实例组成一个消费者组。

topic
    opic 是一种消息的逻辑分类，比如说你有订单类的消息，也有库存类的消息，那么就需要进行分类，
    一个是订单 Topic 存放订单相关的消息，一个是库存 Topic 存储库存相关的消息。

message
    Message 是消息的载体。
    一个 Message 必须指定 topic，相当于寄信的地址。
    Message 还有一个可选的 tag 设置，以便消费端可以基于 tag 进行过滤消息。
    也可以添加额外的键值对，例如你需要一个业务 key 来查找 broker 上的消息，方便在开发过程中诊断问题。

tag
    标签可以被认为是对 Topic 进一步细化。
    一般在相同业务模块中通过引入标签来标记不同用途的消息。

broker
    Broker 是 RocketMQ 系统的主要角色，其实就是前面一直说的 MQ。
    Broker 接收来自生产者的消息，储存以及为消费者拉取消息的请求做好准备。

Name Server
    Name Server 为 producer 和 consumer 提供路由信息
    提供轻量级的服务发现和路由

# 架构
Producer -> Broker Master -> Broker Slave -> Consumer 
                    -> Name server 

# RocketMQ 集群部署模式
单 master 模式
    也就是只有一个 master 节点，称不上是集群，一旦这个 master 节点宕机，那么整个服务就不可用，适合个人学习使用。
多 master 模式
    多个 master 节点组成集群，单个 master 节点宕机或者重启对应用没有影响。
    优点：所有模式中性能最高
    缺点：单个 master 节点宕机期间，未被消费的消息在节点恢复之前不可用，消息的实时性就受到影响。
    注意：使用同步刷盘可以保证消息不丢失，同时 Topic 相对应的 queue 应该分布在集群中各个节点，而不是只在某各节点上，否则，该节点宕机会对订阅该 topic 的应用造成影响。
多 master 多 slave 异步复制模式
    在多 master 模式的基础上，每个 master 节点都有至少一个对应的 slave。master
    节点可读可写，但是 slave 只能读不能写，类似于 mysql 的主备模式。
    优点： 在 master 宕机时，消费者可以从 slave 读取消息，消息的实时性不会受影响，性能几乎和多 master 一样。
    缺点：使用异步复制的同步方式有可能会有消息丢失的问题。
多 master 多 slave 同步双写模式
    同多 master 多 slave 异步复制模式类似，区别在于 master 和 slave 之间的数据同步方式。
    优点：同步双写的同步模式能保证数据不丢失。
    缺点：发送单个消息 RT 会略长，性能相比异步复制低10%左右。
    刷盘策略：同步刷盘和异步刷盘（指的是节点自身数据是同步还是异步存储）
    同步方式：同步双写和异步复制（指的一组 master 和 slave 之间数据的同步）
    注意：要保证数据可靠，需采用同步刷盘和同步双写的方式，但性能会较其他方式低。

